@precedence { commandargument @left, character @left }

@top Document {
	(Text | InlineMath | DisplayMath | Command | EqCommand | UnderscoreEscape | Newline | ParagraphSeparator |
	NewlineCommand | "[" | "]" | "{" | "}" | "&" |
	Environment | ListEnvironment | TabularEnvironment | TableEnvironment)*
}

// MathCommandArgument is included to catch { math } groups
Math {
	!character (
		InlineMathContent |
		MathCommand |
		UnderscoreCommand |
		MathCommandArgument |
		QuoteMacro |
		"[" | "]" | "{" | "}" |
		Whitespace |
		Number |
		NewlineCommand |
		Newline
	)*
}

// --- Dollar math ---
InlineMath {
	"$" Math "$"
}

DisplayMath {
	"$$" Math "$$"
}

// --- Command constructs ---
Command {
	CommandIdentifier (CommandArgument | CommandArgumentOptional)*
}

MathCommand {
	CommandIdentifier (MathCommandArgument | CommandArgumentOptional)*
}

// command argument is included to catch { } groups
CommandArgument {
	!commandargument "{" (Text | InlineMath | DisplayMath | Command | EqCommand |
	UnderscoreEscape | NewlineCommand | CommandArgument | Newline | ParagraphSeparator |
	"[" | "]")* "}"
}

MathCommandArgument {
	!commandargument "{" Math "}"
}

CommandArgumentOptional {
	!commandargument "[" (Text | InlineMath | DisplayMath | Command |
	UnderscoreEscape | Newline | ParagraphSeparator)* "]"
}

// --- Specialized command names ---
EqCommandIdentifier {
	@specialize<CommandIdentifier, "\\eq">
}

EqCommand {
	 EqCommandIdentifier CommandArgumentOptional? MathCommandArgument
}

UnderscoreEscape {
	@specialize<CommandIdentifier, "\\_">
}

UnderscoreCommand {
	@specialize<CommandIdentifier, "\\_"> (CommandArgument|Command|Singlechar)
}

NewlineCommand {
	@specialize<CommandIdentifier, "\\\\">
}

BooktabCommand {
	@specialize<CommandIdentifier, "\\toprule" | "\\midrule" | "\\bottomrule" | "\\botrule">
}

HlineCommand {
	@specialize<CommandIdentifier, "\\hline">
}

ItemCommand {
	@specialize<CommandIdentifier, "\\item"> CommandArgumentOptional?
}

QuoteMacro {
	"\"" (Number | MathCommand | MathCommandArgument | QuoteMacroContent)+
	("e" (Number | MathCommandArgument))? ((Whitespace|Newline) Math)? "\""
}

// --- Environments ---
EnvironmentNameArgument<name> {
	"{" name "}"
}

BeginCommandIdentifier {
	@specialize<CommandIdentifier, "\\begin">
}

BeginEnv<name> {
	BeginCommandIdentifier
	EnvironmentNameArgument<name>
	(CommandArgumentOptional | CommandArgument)*
}

EndCommandIdentifier {
	@specialize<CommandIdentifier, "\\end">
}

EndEnv<name> {
	EndCommandIdentifier
	EnvironmentNameArgument<name>
}

Environment[group=EnvironmentGroup] {
	BeginEnv<EnvName>
	(Text | InlineMath | DisplayMath | Command | EqCommand | NewlineCommand |
	Newline | Environment | ListEnvironment | TabularEnvironment)*
	EndEnv<EnvName>
}

@external specialize {EnvName} specializeEnvName from "./tokenizer.ts" {
	ListEnvName,
	TabularEnvName,
	TableEnvName
}

ListEnvironment[group=EnvironmentGroup] {
	BeginEnv<ListEnvName>
	(Newline | Command | Whitespace)*
	ListItem {
		ItemCommand
		(Text | InlineMath | DisplayMath | Command | EqCommand | NewlineCommand |
		Newline | ParagraphSeparator | Environment | ListEnvironment | TabularEnvironment | TableEnvironment)*
	}+
	EndEnv<ListEnvName>
}

TabularEnvironment[group=EnvironmentGroup] {
	BeginEnv<TabularEnvName>
	(Text | InlineMath | DisplayMath | Command | EqCommand | Newline | Environment |
	NewlineCommand | "&" | "[" | "]" | BooktabCommand | HlineCommand)*
	EndEnv<TabularEnvName>
}

TableEnvironment[group=EnvironmentGroup] {
	BeginEnv<TableEnvName>
	(Text | InlineMath | DisplayMath | Command | EqCommand | Newline | Environment | NewlineCommand | TabularEnvironment)*
	EndEnv<TableEnvName>
}

@skip { Comment }

@tokens {
	Text { (![\\${}\[\]%\n&])+ }
	CommandIdentifier { "\\" (((@asciiLetter)+"*"?)|"%"|"{"|"}"|"\\"|"_"|"("|")"|","|"#") }
	InlineMathContent { (![\\${}\[\]\"%\n\t\r 0-9])+ }
	QuoteMacroContent { (![\\${}\[\]\"%\n\t\re\+\- 0-9])+ }
	Comment { "%" ![\n]* }
	Newline { "\n" }
	ParagraphSeparator { "\n" "\n"+ }
	Singlechar { @asciiLetter }
	Whitespace { ("\t"|"\r"|" ")+ }
	Number { ("+" | "-")? @digit+ ("~" @digit+)* ("," | ".")? @digit* ("~" @digit+)* }

	EnvName { @asciiLetter+ "*"? }

	// listing those characters to enable syntax highlighting
	"[" "]" "{" "}" "$" "\"" "e" "&"

	@precedence {Number, InlineMathContent}
	@precedence {ParagraphSeparator, Newline}
}
